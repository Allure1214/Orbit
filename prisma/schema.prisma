// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tasks         Task[]
  notes         Note[]
  expenses      Expense[]
  achievements  UserAchievement[]
  preferences   UserPreferences?
  
  @@map("users")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notes")
}

model Expense {
  id          String        @id @default(cuid())
  amount      Float
  description String
  category    ExpenseCategory
  date        DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("expenses")
}

model UserPreferences {
  id              String  @id @default(cuid())
  theme           String  @default("light")
  dashboardLayout Json?
  weatherLocation String?
  newsCategories  String[]
  
  // Relations
  userId          String  @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  condition   String // JSON string describing the condition
  
  // Relations
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ExpenseCategory {
  FOOD
  TRANSPORTATION
  ENTERTAINMENT
  SHOPPING
  BILLS
  HEALTHCARE
  EDUCATION
  OTHER
}
