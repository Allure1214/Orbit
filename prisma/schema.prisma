// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Google Calendar integration tokens
  googleAccessToken   String?
  googleRefreshToken  String?
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // App relations
  tasks         Task[]
  notes         Note[]
  expenses      Expense[]
  achievements  UserAchievement[]
  preferences   UserPreferences?
  checkIns      CheckIn[]
  events        Event[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notes")
}

model Expense {
  id          String        @id @default(cuid())
  amount      Float
  description String
  category    ExpenseCategory
  date        DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("expenses")
}

model UserPreferences {
  id              String  @id @default(cuid())
  theme           String  @default("dark")
  dashboardLayout Json?
  weatherLocation String?
  newsCategories  String[]
  
  // Financial preferences
  monthlyBudget   Float?  @default(2000.0)
  currency        String  @default("USD")
  
  // Widget preferences
  enabledWidgets  Json?   @default("{\"tasks\":true,\"weather\":true,\"finance\":true,\"news\":true,\"f1\":true,\"notes\":true,\"currency\":true,\"calendar\":true,\"pomodoro\":true}")
  
  // Google Calendar integration
  googleCalendarEnabled  Boolean @default(false)
  googleCalendarSync     Boolean @default(false)
  googleCalendarId       String?
  
  // Relations
  userId          String  @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model CheckIn {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("check_ins")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  allDay      Boolean   @default(false)
  location    String?
  color       String    @default("#3B82F6")
  type        EventType @default(PERSONAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Google Calendar integration
  googleEventId     String?
  googleCalendarId  String?
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("events")
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  condition   String // JSON string describing the condition
  
  // Relations
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ExpenseCategory {
  FOOD
  TRANSPORTATION
  ENTERTAINMENT
  SHOPPING
  BILLS
  HEALTHCARE
  EDUCATION
  OTHER
}

enum EventType {
  PERSONAL
  WORK
  MEETING
  DEADLINE
  BIRTHDAY
  HOLIDAY
  F1_RACE
  GOOGLE_CALENDAR
  OTHER
}
